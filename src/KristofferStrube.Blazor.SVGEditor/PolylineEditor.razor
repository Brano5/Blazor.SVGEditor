<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement>
    <g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <polyline points="@SVGElement.Element.GetAttribute("points")" fill="@SVGElement.Fill" stroke="@SVGElement.Stroke" stroke-width="@SVGElement.StrokeWidth" @onmousedown="Select">
        </polyline>
    </g>
    @if (SVGElement.Selected && SVGElement.EditMode != EditMode.Add)
    {
        @for (int i = 0; i < SVGElement.Points.Count(); i++)
        {
            var j = i;
            <PrimaryAnchor OnMouseDown="() => AnchorSelect(j)" Position=SVGElement.Points[i] />
        }
    }
</ContextMenuTrigger>


@code {
    [Parameter]
    public Polyline SVGElement { get; set; }

    public void AnchorSelect(int j)
    {
        if (SVGElement.EditMode != EditMode.Add)
        {
            SVGElement.CurrentAnchor = j;
            SVGElement.EditMode = EditMode.MoveAnchor;
        }
    }

    public void Select(MouseEventArgs eventArgs)
    {
        if (SVGElement.SVG.CurrentShape == null || SVGElement.SVG.CurrentShape.EditMode == EditMode.None)
        {
            SVGElement.SVG.CurrentShape = SVGElement;
            SVGElement.Panner = SVGElement.SVG.LocalDetransform((eventArgs.OffsetX, eventArgs.OffsetY));
            SVGElement.EditMode = EditMode.Move;
        }
    }

    protected override bool ShouldRender()
    {
        var StateRepresentation = SVGElement.StateRepresentation;
        if (SVGElement._StateRepresentation != StateRepresentation)
        {
            SVGElement._StateRepresentation = StateRepresentation;
            return true;
        }
        return false;
    }
}
