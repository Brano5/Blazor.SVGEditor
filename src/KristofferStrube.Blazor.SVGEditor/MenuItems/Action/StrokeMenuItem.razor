@if (Data is Shape shape)
{
    <Item OnClick=@(() => SVGEditor.OpenColorPicker("Stroke", shape.Stroke, _ => {}))>
        <ColorCube Color=@shape.Stroke /> Stroke
        <SubMenu>
            <Item @onclick:stopPropagation="true">
                <div class="icon">➖</div> Width
                <input type="number" @bind-value=shape.StrokeWidth @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
            </Item>
            <Item @onclick:stopPropagation="true">
                <div class="icon">🍭</div> Line Cap
                <InputSelect @bind-Value=shape.StrokeLinecap style="width:70px;height:28px;float:right;">
                    <option value="@Linecap.Butt">butt</option>
                    <option value="@Linecap.Round">round</option>
                    <option value="@Linecap.Square">square</option>
                </InputSelect>
            </Item>
            <Item @onclick:stopPropagation="true">
                <div class="icon">🧩</div> Line Join
                <InputSelect @bind-Value=shape.StrokeLinejoin style="width:70px;height:28px;float:right;">
                    <option value="@Linejoin.Miter">miter</option>
                    <option value="@Linejoin.MiterClip">miter-clip</option>
                    <option value="@Linejoin.Round">round</option>
                    <option value="@Linejoin.Bevel">bevel</option>
                    <option value="@Linejoin.Arcs">arcs</option>
                </InputSelect>
            </Item>
            <Item @onclick:stopPropagation="true">
                <div class="icon">🍡</div> Dash Array
                <input @bind-value=shape.StrokeDasharray @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
            </Item>
            <Item @onclick:stopPropagation="true">
                <div class="icon">🔪</div> Dash Offset
                <input type="number" @bind-value=shape.StrokeDashoffset @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
            </Item>
            <Item OnClick=@(_ => SetStrokeForMarkedShapes("none"))><div class="icon">⚪</div> Set To None</Item>
            <Item OnClick=@(_ => SetStrokeForMarkedShapes("transparent"))><div class="icon">🔘</div> Set To Transparent</Item>
            <Item OnClick=@(_ => SetStrokeForMarkedShapes("black"))><div class="icon">⚫</div> Set To Black</Item>
            @if (SVGEditor.Definitions.Values.Count(d => d is LinearGradient) > 0)
            {
                <Item>
                    <div class="icon">🦓</div> Gradients
                    <SubMenu>
                        @foreach (var (key, value) in SVGEditor.Definitions)
                        {
                            <Item OnClick=@(_ => SetStrokeForMarkedShapes(key.ToUrl()))>
                                <ColorCube Color=@($"url('#{key}')") />
                                @key
                            </Item>
                        }
                    </SubMenu>
                </Item>
            }
        </SubMenu>
    </Item>
}

@code {
    [CascadingParameter]
    public SVGEditor SVGEditor { get; set; } = default!;

    [Parameter]
    public object Data { get; set; } = default!;

    private void SetStrokeForMarkedShapes(string value)
    {
        SVGEditor.MarkedShapes.ForEach(shape => shape.Stroke = value);
    }
}
