@inject IBlazorContextMenuService blazorContextMenuService

<CascadingValue Value=this IsFixed=true>
    <ContextMenuTrigger MenuId="SVGMenu" style="height:100%;">
        <svg @ref=SVGElementReference
        @onpointermove="Move"
        @onpointerdown="Down"
        @onpointerup="Up"
        @onpointerout="Out"
        @onwheel="Wheel"
             style="border:1px solid black; cursor:@(TranslatePanner.HasValue ? "move" : "initial");user-select:none;touch-action:none;"
             width="100%"
             height="100%"
        @onpointerdown:stopPropagation="true">
            <rect width="100%" height="100%" fill="transparent" @onpointerdown=@UnSelect></rect>
            @foreach (ISVGElement SVGElement in Elements)
            {
                var Parameters = new Dictionary<string, object> { { "SVGElement", SVGElement } };
                <DynamicComponent Type=@SVGElement.Presenter Parameters=Parameters />
            }
            <foreignObject class="unselectable" x="5" y="0" height="22" width="150" style="font-size:20px;pointer-events:none;touch-action:none;">Scale 1:@(Math.Round(Scale, 3).AsString())</foreignObject>
            @foreach (var shape in MarkedShapes)
            {
                @if (shape.Fill is ['u', 'r', 'l', '(', '\'', '#', .. var id, '\'', ')']
               && Definitions.TryGetValue(id, out var definition)
               && definition is LinearGradient linearGradient)
                {
                    <LinearGradientEditor LinearGradient="linearGradient" EditingShape="shape" />
                }
            }
            @if (SelectionBox is not null)
            {
                <BoxScaler Box=SelectionBox />
            }
        </svg>
    </ContextMenuTrigger>
    <ContextMenu Id="SVGMenu">
        @if (SelectedShapes.Count == 1 && EditMode == EditMode.Add)
        {
            <Item OnClick="_ => CompleteShape(SelectedShapes[0])">
                <div class="icon">✨</div> Complete New Shape
                @if (SelectedShapes[0] is Path path)
                {
                    <SubMenu>
                        <Item OnClick="_ => CompleteShapeWithoutClose(path)"><div class="icon">❗</div> Complete Without Close Instruction</Item>
                        <Item OnClick="_ => DeletePreviousInstruction(path)"><div class="icon">❌</div> Remove Last added Instruction</Item>
                    </SubMenu>
                }
            </Item>
        }
        else
        {
            <Item>
                <div class="icon">✨</div> Add
                <SubMenu>
                    @if (context.Data is LinearGradient linearGradient)
                    {
                        <Item OnClick="_ => linearGradient.AddNewStop()"><div class="icon">⚪</div> New Stop to Gradient</Item>
                    }
                    else if (context.Data is Stop stop)
                    {
                        <Item OnClick="_ => stop.Parent.AddNewStop(stop)"><div class="icon">⚪</div> New Stop to Gradient</Item>
                    }
                    else
                    {
                        <Item OnClick="_ => Path.AddNew(this)"><div class="icon">🎢</div> New Path</Item>
                        <Item OnClick="_ => Polygon.AddNew(this)"><div class="icon">🔷</div> New Polygon</Item>
                        <Item OnClick="_ => Polyline.AddNew(this)"><div class="icon">〰</div> New Polyline</Item>
                        <Item OnClick="_ => Line.AddNew(this)"><div class="icon">➖</div> New Line</Item>
                        <Item OnClick="_ => Circle.AddNew(this)"><div class="icon">🔵</div> New Circle</Item>
                        <Item OnClick="_ => Ellipse.AddNew(this)"><div class="icon">🕳</div> New Ellipse</Item>
                        <Item OnClick="_ => Rect.AddNew(this)"><div class="icon">🟦</div> New ´Rectangle</Item>
                        <Item OnClick="_ => Text.AddNew(this)"><div class="icon">🅱</div> New Text</Item>
                        <Item @onclick:stopPropagation="true">
                            <div class="icon">🦓</div> New Gradient
                            <SubMenu>
                                <Item @onclick:stopPropagation="true">
                                    <div class="icon">📏</div> Linear
                                    <input @bind-value=NewLinearGradientId style="width:50px;" />
                                    @if (context.Data is Shape shape)
                                    {
                                        <button class="btn btn-success btn-sm" @onclick=@(_ => { LinearGradient.AddNew(this, NewLinearGradientId, shape); blazorContextMenuService.HideMenu("SVGMenu"); NewLinearGradientId = ""; })>➕</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success btn-sm" @onclick=@(_ => { LinearGradient.AddNew(this, NewLinearGradientId); blazorContextMenuService.HideMenu("SVGMenu"); NewLinearGradientId = ""; })>➕</button>
                                    }
                                </Item>
                            </SubMenu>
                        </Item>
                    }
                    @if (context.Data is Shape shape && !shape.IsChildElement)
                    {
                        <Item>
                            <div class="icon">💥</div> New Animation
                            <SubMenu>
                                <Item OnClick="_ => AnimateFill.AddNew(this, shape)"><div class="icon">🎨</div> Fill</Item>
                                <Item OnClick="_ => AnimateStroke.AddNew(this, shape)"><div class="icon">🎨</div> Stroke</Item>
                                @if (shape is Path path)
                                {
                                    <Item OnClick="_ => AnimateD.AddNew(this, path)"><div class="icon">🎢</div> Path Data</Item>
                                }
                            </SubMenu>
                        </Item>
                    }
                </SubMenu>
            </Item>
        }
        @if (context.Data is Shape shape && !shape.IsChildElement)
        {
            <Item OnClick=@(() => OpenColorPicker("Fill", shape.Fill, _ => {}))>
                <ColorCube Color=@shape.Fill /> Fill
                <SubMenu>
                    <Item OnClick=@(_ => SetFillForMarkedShapes("none"))><div class="icon">⚪</div> Set To None</Item>
                    <Item OnClick=@(_ => SetFillForMarkedShapes("transparent"))><div class="icon">🔘</div> Set To Transparent</Item>
                    <Item OnClick=@(_ => SetFillForMarkedShapes("black"))><div class="icon">⚫</div> Set To Black</Item>
                    @if (Definitions.Values.Count(d => d is LinearGradient) > 0)
                    {
                        <Item>
                            <div class="icon">🦓</div> Gradients
                            <SubMenu>
                                @foreach (var (key, value) in Definitions)
                                {
                                    <Item OnClick=@(_ => SetFillForMarkedShapes(key.ToUrl()))>
                                        <ColorCube Color=@($"url('#{key}')") />
                                        @key
                                    </Item>
                                }
                            </SubMenu>
                        </Item>
                    }
                </SubMenu>
            </Item>
            <Item OnClick=@(() => OpenColorPicker("Stroke", shape.Stroke, _ => {}))>
                <ColorCube Color=@shape.Stroke /> Stroke
                <SubMenu>
                    <Item @onclick:stopPropagation="true">
                        <div class="icon">➖</div> Width
                        <input type="number" @bind-value=shape.StrokeWidth @bind-value:event="oninput" style="width:50px;float:right;" />
                    </Item>
                    <Item @onclick:stopPropagation="true">
                        <div class="icon">🍡</div> Dash Array
                        <input @bind-value=shape.StrokeDasharray @bind-value:event="oninput" style="width:50px;float:right;" />
                    </Item>
                    <Item @onclick:stopPropagation="true">
                        <div class="icon">🔪</div> Dash Offset
                        <input type="number" @bind-value=shape.StrokeDashoffset @bind-value:event="oninput" style="width:50px;float:right;" />
                    </Item>
                    <Item OnClick=@(_ => SetStrokeForMarkedShapes("none"))><div class="icon">⚪</div> Set To None</Item>
                    <Item OnClick=@(_ => SetStrokeForMarkedShapes("transparent"))><div class="icon">🔘</div> Set To Transparent</Item>
                    <Item OnClick=@(_ => SetStrokeForMarkedShapes("black"))><div class="icon">⚫</div> Set To Black</Item>
                    @if (Definitions.Values.Count(d => d is LinearGradient) > 0)
                    {
                        <Item>
                            <div class="icon">🦓</div> Gradients
                            <SubMenu>
                                @foreach (var (key, value) in Definitions)
                                {
                                    <Item OnClick=@(_ => SetStrokeForMarkedShapes(key.ToUrl()))>
                                        <ColorCube Color=@($"url('#{key}')") />
                                        @key
                                    </Item>
                                }
                            </SubMenu>
                        </Item>
                    }
                </SubMenu>
            </Item>
            @if (shape is Text text)
            {
                <Item @onclick:preventDefault="true">
                    <div class="icon">🔠</div> Font Size
                    <input type="number" @bind-value=text.FontSize @bind-value:event="oninput" style="width:50px;float:right;" />
                </Item>
            }
            if (shape.HasAnimation)
            {
                <Item>
                    <div class="icon">💥</div> Animations
                    <SubMenu>
                        @if (shape.AnimationElements.Any(a => a.Playing))
                        {
                            <Item OnClick="StopAnimation"><div class="icon">🛑</div> Stop Animations</Item>
                        }
                        else
                        {
                            <Item OnClick="PlayAnimation"><div class="icon">▶</div> Play Animations</Item>
                        }
                        @foreach (BaseAnimate animate in shape.AnimationElements)
                        {
                            var Parameters = new Dictionary<string, object> { { "Animate", animate } };
                            <DynamicComponent Type=animate.MenuItem Parameters=Parameters />
                        }
                    </SubMenu>
                </Item>
            }
            <Item>
                <div class="icon">↕</div> Move
                <SubMenu>
                    <Item OnClick="() => MoveToBack(shape)"><div class="icon">⏫</div> To Back</Item>
                    <Item OnClick="() => MoveBack(shape)"><div class="icon">🔼</div> Back</Item>
                    <Item OnClick="() => MoveForward(shape)"><div class="icon">🔽</div> Forward</Item>
                    <Item OnClick="() => MoveToFront(shape)"><div class="icon">⏬</div> To Front</Item>
                </SubMenu>
            </Item>
            if (shape is Path path)
            {
                <Item data=path OnClick="() => ScaleShape(shape)"> <div class="icon">↔</div> Scale</Item>
            }
            <Item OnClick="() => Group(shape)"><div class="icon">🔗</div> Group</Item>
            if (shape is G g)
            {
                <Item OnClick="() => Ungroup(g)"><div class="icon">📤</div> Ungroup</Item>
            }
            <Item OnClick="() => Remove()"><div class="icon">❌</div> Delete</Item>
            <Item OnClick="() => CopyElementsAsync()"><div class="icon">✂️</div> Copy</Item>
            <Item OnClick="() => PasteElementsAsync(shape)"><div class="icon">📋</div> Paste</Item>
            <Item>
                <div class="icon">📈</div> Optimize
                <SubMenu>
                    <Item OnClick="() => SnapShapesToInteger()"><div class="icon">🔢</div> Snap To Integer</Item>
                    <Item OnClick="() => CompactPaths()"><div class="icon">🤏</div> Compact paths to relative</Item>
                </SubMenu>
            </Item>
        }
        else if (context.Data is Stop stop)
        {
            <Item OnClick=@(() => OpenColorPicker("Gradient Stop", stop.StopColor, (value) => stop.StopColor = value))>
                <ColorCube Color=@stop.StopColor /> Gradient Stop Color
            </Item>
        }
        else
        {
            <Item OnClick="() => PasteElementsAsync()"><div class="icon">📋</div> Paste</Item>
        }
    </ContextMenu>
</CascadingValue>
<ColorPicker Title=@ColorPickerTitle IsOpened=@IsColorPickerOpen Closed=@ColorPickerClosed MyColor=@PreviousColor></ColorPicker>