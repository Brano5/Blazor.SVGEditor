<svg @onmousemove="Move" @onmouseup="Up" @onmouseout="Out" style="border:1px solid black" width="100%" height="80vh" @onmousedown:preventDefault="true">
    @foreach (ISVGElement element in Elements)
    {
        switch (element.TagName)
        {
            case "RECT":
                var rectangle = (Rectangle)element;
                <RectangleEditor Rectangle=rectangle />
                break;
            case "POLYGON":
                var polygon = (Polygon)element;
                <PolygonEditor Polygon=polygon />
                break;
            case "PATH":
                var path = (Path)element;
                <PathEditor Path=path />
                break;
        }
    }
    <rect x="0" y="0" width="50" height="50" fill="pink" stroke-width="3" stroke="red" @onclick="UnSelect" />

    <circle cx="30" cy="80" r="27" fill="lightgrey" @onclick="() => ZoomIn()"></circle>
    <path d="M 27 57 v 20 h -20 v 6 h 20 v 20 h 6 v -20 h 20 v -6 h -20 v -20 z" fill="black" style="pointer-events:none;"></path>

    <circle cx="30" cy="140" r="27" fill="lightgrey" @onclick="() => ZoomOut()"></circle>
    <path d="M 7 137 h 46 v 6 h -46 z" fill="black" style="pointer-events:none;"></path>

    <foreignObject x="60" y="0" height="22" width="150" style="font-size:20px;">Scale 1:@(Math.Round(Scale, 2).AsString())</foreignObject>
</svg>

@code {
    [Parameter]
    public string Input { get; set; }

    private string _Input { get; set; }

    [Parameter]
    public Action<string> InputUpdated { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Input == _Input)
        {
            return;
        }
        _Input = Input;

        var config = Configuration.Default;

        var context = BrowsingContext.New(config);

        var document = await context.OpenAsync(req => req.Content(Input));

        Elements = document.GetElementsByTagName("BODY")[0].Children.Select<AngleSharp.Dom.IElement, ISVGElement>(child =>
        {
            ISVGElement element;
            switch (child.TagName)
            {
                case "RECT":
                    element = new Rectangle(child, this);
                    break;
                case "POLYGON":
                    element = new Polygon(child, this);
                    break;
                case "PATH":
                    element = new Path(child, this);
                    break;
                default:
                    element = new NonImplmentedElement();
                    break;

            }
            element.Changed = UpdateInput;
            return element;
        }
        ).ToList();

        ElementsAsHtml = Elements.Select(e => e.Element.ToHtml()).ToList();
    }

    private void UpdateInput(ISVGElement element)
    {
        ElementsAsHtml[Elements.IndexOf(element)] = element.Element.ToHtml();
        _Input = string.Join(" \n", ElementsAsHtml);
        InputUpdated(_Input);
    }

    public double Scale { get; set; } = 1;

    public List<ISVGElement> Elements { get; set; }

    public List<string> ElementsAsHtml { get; set; }

    public ISVGElement CurrentShape { get; set; }

    public void Move(MouseEventArgs eventArgs)
    {
        CurrentShape?.HandleMouseMove(eventArgs);
    }

    public void Up(MouseEventArgs eventArgs)
    {
        CurrentShape?.HandleMouseUp(eventArgs);
    }

    public void Out(MouseEventArgs eventArgs)
    {
        CurrentShape?.HandleMouseOut(eventArgs);
    }

    public void UnSelect(MouseEventArgs eventArgs)
    {
        CurrentShape = null;
    }

    public void ZoomIn()
    {
        if (Scale >= 0.5)
        {
            Scale += 0.1 + 0.1 * (int)(Scale / 2);
        }
        else
        {
            Scale *= 1.1;
            if (Scale > 0.47 && Scale < 0.53)
            {
                Scale = 0.5;
            }
        }
    }

    public void ZoomOut()
    {
        if (Scale > 0.5)
        {
            Scale -= 0.1 + 0.1 * (int)(Scale / 2);
        }
        else
        {
            Scale /= 1.1;
        }
    }
}
