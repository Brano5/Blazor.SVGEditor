<ContextMenuTrigger MenuId="SVGMenu" style="height:100%;">
    <svg @ref=SVGElementReference
         @onmousemove="Move"
         @onmousedown="Down"
         @onmouseup="Up"
         @onmouseout="Out"
         @onwheel="Wheel"
         style="border:1px solid black; cursor:@(TranslatePanner.HasValue ? "move" : "initial");"
         width="100%"
         height="100%"
         @onmousedown:preventDefault="true">
        <rect width="100%" height="100%" fill="transparent" @onmousedown=@UnSelect></rect>
        <CascadingValue Value=this IsFixed=true>
            @foreach (ISVGElement SVGElement in Elements)
            {
                var Parameters = new Dictionary<string, object> { { "SVGElement", SVGElement } };
                <DynamicComponent Type=@SVGElement.Editor Parameters=Parameters />
            }
            <foreignObject x="5" y="0" height="22" width="150" style="font-size:20px;pointer-events:none;">Scale 1:@(Math.Round(Scale, 3).AsString())</foreignObject>
            @if (SelectionBox is not null)
            {
                <BoxScaler Box=SelectionBox />
            }
        </CascadingValue>
    </svg>
</ContextMenuTrigger>
<ContextMenu Id="SVGMenu">
    <Item OnClick="() => ContextZoomIn()"><div class="icon">🔍</div> Zoom In</Item>
    <Item OnClick="() => ContextZoomOut()"><div class="icon">🔍</div> Zoom Out</Item>
    @if (SelectedShapes.Count == 1 && EditMode == EditMode.Add)
    {
        <Item OnClick="_ => CompleteShape(SelectedShapes[0])">
            <div class="icon">✨</div> Complete New Shape
            @if (SelectedShapes[0] is Path path)
            {
                <SubMenu>
                    <Item OnClick="_ => CompleteShapeWithoutClose(path)"><div class="icon">❗</div> Complete Without Close Instruction</Item>
                    <Item OnClick="_ => DeletePreviousInstruction(path)"><div class="icon">❌</div> Remove Last added Instruction</Item>
                </SubMenu>
            }
        </Item>
    }
    else
    {
        <Item>
            <div class="icon">✨</div> Add
            <SubMenu>
                <Item OnClick="_ => Path.AddNew(this)"><div class="icon">🎢</div> New Path</Item>
                <Item OnClick="_ => Polygon.AddNew(this)"><div class="icon">🔷</div> New Polygon</Item>
                <Item OnClick="_ => Polyline.AddNew(this)"><div class="icon">〰</div> New Polyline</Item>
                <Item OnClick="_ => Line.AddNew(this)"><div class="icon">➖</div> New Line</Item>
                <Item OnClick="_ => Circle.AddNew(this)"><div class="icon">🔵</div> New Circle</Item>
                <Item OnClick="_ => Ellipse.AddNew(this)"><div class="icon">🕳</div> New Ellipse</Item>
                <Item OnClick="_ => Rect.AddNew(this)"><div class="icon">🟦</div> New rectangle</Item>
            </SubMenu>
        </Item>
    }
    @if (context.Data is Shape shape && !shape.IsChildElement)
    {
        <Item @onclick:preventDefault="true">
            <div class="icon">➖</div> Stroke Width
            <input type="number" @bind-value=shape.StrokeWidth style="width:50px;" />
        </Item>
        @if (shape.HasAnimation)
        {
            @if (shape.AnimationElements.Any(a => a.Playing))
            {
                <Item OnClick="StopAnimation"><div class="icon">🛑</div> Stop Animation</Item>
            }
            else
            {
                <Item OnClick="PlayAnimation"><div class="icon">▶</div> Play Animation</Item>
            }
        }
        <Item>
            <div class="icon">↕</div> Move
            <SubMenu>
                <Item OnClick="() => MoveToBack(shape)"><div class="icon">⏫</div> To Back</Item>
                <Item OnClick="() => MoveBack(shape)"><div class="icon">🔼</div> Back</Item>
                <Item OnClick="() => MoveForward(shape)"><div class="icon">🔽</div> Forward</Item>
                <Item OnClick="() => MoveToFront(shape)"><div class="icon">⏬</div> To Front</Item>
            </SubMenu>
        </Item>
        if (shape is Path path)
        {
            <Item data=path OnClick="() => ScaleShape(shape)"> <div class="icon">↔</div> Scale</Item>
        }
        <Item OnClick="() => Group(shape)"><div class="icon">🔗</div> Group</Item>
        if (shape is G g)
        {
            <Item OnClick="() => Ungroup(g)"><div class="icon">📤</div> Ungroup</Item>
        }
        <Item OnClick="() => Remove()"><div class="icon">❌</div> Delete</Item>
        <Item OnClick="() => CopyElementsAsync()"><div class="icon">✂️</div> Copy</Item>
        <Item OnClick="() => PasteElementsAsync(shape)"><div class="icon">📋</div> Paste</Item>
    }
    else
    {
        <Item OnClick="() => PasteElementsAsync()"><div class="icon">📋</div> Paste</Item>
    }
</ContextMenu>
<ColorPicker Title=@ColorPickerTitle IsOpened=@IsColorPickerOpen Closed=@ColorPickerClosed MyColor=@PreviousColor></ColorPicker>