@using BlazorColorPicker

<ContextMenuTrigger MenuId="SVGMenu">
    <svg @onmousemove="Move" @onmousedown="Down" @onmouseup="Up" @onmouseout="Out" @onwheel="Wheel" style="border:1px solid black; cursor:@(Panning ? "move" : "initial");" width="100%" height="80vh" @onmousedown:preventDefault="true">
        <Symbols />
        <rect width="100%" height="100%" fill="transparent" @onmousedown=@UnSelect></rect>
        <CascadingValue Value=this>
            @foreach (ISVGElement SVGElement in Elements)
            {
                var Parameters = new Dictionary<string, object> { { "SVGElement", SVGElement } };
                <DynamicComponent Type=@SVGElement.Editor Parameters=@Parameters />
            }
        </CascadingValue>
        <foreignObject x="5" y="0" height="22" width="150" style="font-size:20px;">Scale 1:@(Math.Round(Scale, 3).AsString())</foreignObject>
    </svg>
</ContextMenuTrigger>
<ContextMenu Id="SVGMenu">
    <Item OnClick="() => ContextZoomIn()"><div class="icon">🔍</div> Zoom In</Item>
    <Item OnClick="() => ContextZoomOut()"><div class="icon">🔍</div> Zoom Out</Item>
    @if (CurrentShape != null && CurrentShape.EditMode == EditMode.Add)
    {
        <Item OnClick=@CompleteShape><div class="icon">✨</div> Complete New Shape</Item>
    }
    else
    {
        <Item>
            <div class="icon">✨</div> Add
            <SubMenu>
                <Item OnClick="e => Path.AddNew(this)"><div class="icon">🎢</div> New Path</Item>
                <Item OnClick="e => Polygon.AddNew(this)"><div class="icon">🔷</div> New Polygon</Item>
                <Item OnClick="e => Polyline.AddNew(this)"><div class="icon">〰</div> New Polyline</Item>
                <Item OnClick="e => Line.AddNew(this)"><div class="icon">➖</div> New Line</Item>
                <Item OnClick="e => Circle.AddNew(this)"><div class="icon">🔵</div> New Circle</Item>
                <Item OnClick="e => Ellipse.AddNew(this)"><div class="icon">🕳</div> New Ellipse</Item>
                <Item OnClick="e => Rect.AddNew(this)"><div class="icon">🟦</div> New rectangle</Item>
            </SubMenu>
        </Item>
    }
    @if (context.Data != null)
    {
        if (context.Data is Shape shape)
        {
            <Item data=shape OnClick="@OpenFillColorPicker"><div class="colorPickerCube" style="background-color:@shape.Fill;"></div> Fill Color</Item>
            <Item data=shape OnClick="@OpenStrokeColorPicker"><div class="colorPickerCube" style="background-color:@shape.Stroke;"></div> Stroke Color</Item>
            <Item data=shape OnClick="@DeleteShape"><div class="icon">❌</div> Delete</Item>
            <Item>
                <div class="icon">↕</div> Move
                <SubMenu>
                    <Item data=shape OnClick="@MoveToBack"><div class="icon">⏫</div> To Back</Item>
                    <Item data=shape OnClick="@MoveBack"><div class="icon">🔼</div> Back</Item>
                    <Item data=shape OnClick="@MoveForward"><div class="icon">🔽</div> Forward</Item>
                    <Item data=shape OnClick="@MoveToFront"><div class="icon">⏬</div> To Front</Item>
                </SubMenu>
            </Item>
            if (shape is Path path)
            {
                <Item data=path OnClick=@ScaleShape> <div class="icon">↔</div> Scale</Item>
            }
        }
    }
</ContextMenu>
<ColorPicker Title=@ColorPickerTitle IsOpened=@IsColorPickerOpen Closed=@ColorPickerClosed MyColor=@PreviousColor></ColorPicker>