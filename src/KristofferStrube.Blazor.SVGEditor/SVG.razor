@using BlazorColorPicker

<ContextMenuTrigger MenuId="SVGMenu">
    <svg @onmousemove="Move" @onmouseup="Up" @onmouseout="Out" @onwheel="Wheel" style="border:1px solid black" width="100%" height="80vh" @onmousedown:preventDefault="true">
        <Symbols />
        <rect width="100%" height="100%" fill="transparent" @onmouseup=@UnSelect></rect>
        <CascadingValue Value=this>
            @foreach (ISVGElement SVGElement in Elements)
            {
                var Parameters = new Dictionary<string, object> { { "SVGElement", SVGElement } };
                <DynamicComponent Type=@SVGElement.Editor Parameters=@Parameters />
            }
        </CascadingValue>
        <foreignObject x="5" y="0" height="22" width="150" style="font-size:20px;">Scale 1:@(Math.Round(Scale, 3).AsString())</foreignObject>
    </svg>
</ContextMenuTrigger>
<ContextMenu Id="SVGMenu">
    <Item OnClick="() => ContextZoomIn()">🔍 Zoom In</Item>
    <Item OnClick="() => ContextZoomOut()">🔍 Zoom Out</Item>
    @if (context.Data != null)
    {
        if (context.Data is Shape shape)
        {
            <Item data=shape OnClick="@OpenFillColorPicker"><span class="colorPickerCube" style="background-color:@shape.Fill;"></span> Fill Color</Item>
            <Item data=shape OnClick="@OpenStrokeColorPicker"><span class="colorPickerCube" style="background-color:@shape.Stroke;"></span> Stroke Color</Item>
        }
    }
    @if (CurrentShape != null && CurrentShape.EditMode == EditMode.Add)
    {
        <Item OnClick=@CompleteShape>✨ Complete New Shape</Item>
    }
    else
    {
        <Item>
            ✨ Add
            <SubMenu>
                <Item OnClick="e => Path.AddNew(this)">🎢 New Path</Item>
                <Item OnClick="e => Polygon.AddNew(this)">🔷 New Polygon</Item>
                <Item OnClick="e => Polyline.AddNew(this)">〰 New Polyline</Item>
                <Item OnClick="e => Circle.AddNew(this)">🔵 New Circle</Item>
                <Item OnClick="e => Rectangle.AddNew(this)">🟦 New rectangle</Item>
            </SubMenu>
        </Item>
    }
</ContextMenu>
<ColorPicker Title=@ColorPickerTitle IsOpened=@IsColorPickerOpen Closed=@ColorPickerClosed MyColor=@PreviousColor></ColorPicker>