@using System.Reactive.Subjects
@using System.Reactive.Linq
@using BlazorColorPicker

<ContextMenuTrigger MenuId="SVGMenu">
    <svg @onmousemove="Move" @onmouseup="Up" @onmouseout="Out" style="border:1px solid black" width="100%" height="80vh" @onmousedown:preventDefault="true">
        <rect width="100%" height="100%" fill="transparent" @onmousedown="UnSelect"></rect>
        @foreach (ISVGElement element in Elements)
        {
            switch (element.TagName)
            {
                case "RECT":
                    var rectangle = (Rectangle)element;
                    <RectangleEditor Rectangle=rectangle />
                    break;
                case "CIRCLE":
                    var circle = (Circle)element;
                    <CircleEditor Circle=circle />
                    break;
                case "POLYGON":
                    var polygon = (Polygon)element;
                    <PolygonEditor Polygon=polygon />
                    break;
                case "PATH":
                    var path = (Path)element;
                    <PathEditor Path=path />
                    break;
            }
        }
        <foreignObject x="5" y="0" height="22" width="150" style="font-size:20px;">Scale 1:@(Math.Round(Scale, 2).AsString())</foreignObject>
    </svg>
</ContextMenuTrigger>
<ContextMenu Id="SVGMenu">
    <Item OnClick="@ZoomIn">🔍 Zoom In</Item>
    <Item OnClick="@ZoomOut">🔍 Zoom Out</Item>
    @if(context.Data != null)
    {
        if (context.Data is Shape shape)
        {
            <Item data=shape OnClick="@OpenFillColorPicker"><span class="colorPickerCube" style="background-color:@shape.Fill;"></span> Fill Color</Item>
            <Item data=shape OnClick="@OpenStrokeColorPicker"><span class="colorPickerCube" style="background-color:@shape.Stroke;"></span> Stroke Color</Item>
        }
    }
</ContextMenu>
<ColorPicker Title=@ColorPickerTitle IsOpened=@IsColorPickerOpen Closed=@ColorPickerClosed MyColor=@PreviousColor></ColorPicker>

@code {
    [Parameter]
    public string Input { get; set; }

    private string _Input { get; set; }

    [Parameter]
    public Action<string> InputUpdated { get; set; }

    public Shape ColorPickerShape { get; set; }

    public string ColorPickerAttribute { get; set; }

    public string ColorPickerTitle => $"Pick {ColorPickerAttribute} Color";

    public bool IsColorPickerOpen => ColorPickerShape is not null;

    public string PreviousColor => ColorPickerShape is not null ? (ColorPickerAttribute == "Fill" ? ColorPickerShape.Fill : ColorPickerShape.Stroke) : String.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Input == _Input)
        {
            return;
        }
        _Input = Input;

        var config = Configuration.Default;

        var context = BrowsingContext.New(config);

        var document = await context.OpenAsync(req => req.Content(Input));

        Elements = document.GetElementsByTagName("BODY")[0].Children.Select<AngleSharp.Dom.IElement, ISVGElement>(child =>
        {
            ISVGElement element;
            switch (child.TagName)
            {
                case "RECT":
                    element = new Rectangle(child, this);
                    break;
                case "CIRCLE":
                    element = new Circle(child, this);
                    break;
                case "POLYGON":
                    element = new Polygon(child, this);
                    break;
                case "PATH":
                    element = new Path(child, this);
                    break;
                default:
                    element = new NonImplmentedElement();
                    break;

            }
            element.Changed = UpdateInput;
            return element;
        }
        ).ToList();

        ElementsAsHtml = Elements.Select(e => e.Element.ToHtml()).ToList();
    }

    protected override void OnInitialized()
    {
        ElementSubject
            .Buffer(TimeSpan.FromMilliseconds(33))
            .Where(updates => updates.Count > 0)
            .Subscribe(updates =>
            {
                updates
                    .DistinctBy(element => Elements.IndexOf(element))
                    .ToList()
                    .ForEach(element =>
                    {
                        ElementsAsHtml[Elements.IndexOf(element)] = element.Element.ToHtml();
                    });
                _Input = string.Join(" \n", ElementsAsHtml);
                InputUpdated(_Input);
            });
    }

    private Subject<ISVGElement> ElementSubject = new();

    private void UpdateInput(ISVGElement element)
    {
        ElementSubject.OnNext(element);
    }

    public double Scale { get; set; } = 1;

    public List<ISVGElement> Elements { get; set; }

    public List<string> ElementsAsHtml { get; set; }

    public ISVGElement CurrentShape { get; set; }

    public void Move(MouseEventArgs eventArgs)
    {
        CurrentShape?.HandleMouseMove(eventArgs);
    }

    public void Up(MouseEventArgs eventArgs)
    {
        CurrentShape?.HandleMouseUp(eventArgs);
    }

    public void Out(MouseEventArgs eventArgs)
    {
        CurrentShape?.HandleMouseOut(eventArgs);
    }

    public void UnSelect(MouseEventArgs eventArgs)
    {
        CurrentShape = null;
    }

    public void ZoomIn(ItemClickEventArgs e)
    {
        if (Scale >= 0.5)
        {
            Scale += 0.1 + 0.1 * (int)(Scale / 2);
        }
        else
        {
            Scale *= 1.1;
            if (Scale > 0.47 && Scale < 0.53)
            {
                Scale = 0.5;
            }
        }
    }

    public void ZoomOut(ItemClickEventArgs e)
    {
        if (Scale > 0.5)
        {
            Scale -= 0.1 + 0.1 * (int)(Scale / 2);
        }
        else
        {
            Scale /= 1.1;
        }
    }

    protected void OpenFillColorPicker(ItemClickEventArgs e)
    {
        ColorPickerShape = (Shape)e.Data;
        ColorPickerAttribute = "Fill";
    }

    protected void OpenStrokeColorPicker(ItemClickEventArgs e)
    {
        ColorPickerShape = (Shape)e.Data;
        ColorPickerAttribute = "Stroke";
    }

    protected void ColorPickerClosed(string value)
    {
        if (ColorPickerAttribute == "Fill")
        {
            ColorPickerShape.Fill = value;
        }
        else if (ColorPickerAttribute == "Stroke")
        {
            ColorPickerShape.Stroke = value;
        }
        ColorPickerShape = null;
    }
}
