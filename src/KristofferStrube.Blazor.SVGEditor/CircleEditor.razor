<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement>
    <g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <circle cx=@SVGElement.cx.AsString()
                cy=@SVGElement.cy.AsString()
                r=@SVGElement.r.AsString()
                stroke="@SVGElement.Stroke"
                stroke-width="@SVGElement.StrokeWidth"
                fill="@SVGElement.Fill"
                @onmousedown="Select" />
    </g>
    @if (SVGElement.Selected && SVGElement.EditMode != EditMode.Add)
    {
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(0)" Position="(SVGElement.cx + SVGElement.r, SVGElement.cy)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(1)" Position="(SVGElement.cx - SVGElement.r, SVGElement.cy)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(2)" Position="(SVGElement.cx, SVGElement.cy + SVGElement.r)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(3)" Position="(SVGElement.cx, SVGElement.cy - SVGElement.r)" />
    }
</ContextMenuTrigger>

@code {
    [Parameter]
    public Circle SVGElement { get; set; }

    public void AnchorSelect(int anchor)
    {
        SVGElement.CurrentAnchor = anchor;
        SVGElement.EditMode = EditMode.MoveAnchor;
    }

    public void Select(MouseEventArgs eventArgs)
    {
        if (SVGElement.SVG.CurrentShape == null || SVGElement.SVG.CurrentShape.EditMode == EditMode.None)
        {
            SVGElement.SVG.CurrentShape = SVGElement;
            SVGElement.Panner = SVGElement.SVG.LocalDetransform((eventArgs.OffsetX, eventArgs.OffsetY));
            SVGElement.EditMode = EditMode.Move;
        }
    }

    protected override bool ShouldRender()
    {
        var StateRepresentation = SVGElement.StateRepresentation;
        if (SVGElement._StateRepresentation != StateRepresentation)
        {
            SVGElement._StateRepresentation = StateRepresentation;
            return true;
        }
        return false;
    }
}