<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@Circle>
    <g transform="translate(@Circle.SVG.Translate.x.AsString() @Circle.SVG.Translate.y.AsString()) scale(@Circle.SVG.Scale.AsString())">
        <circle cx=@Circle.cx.AsString()
                cy=@Circle.cy.AsString()
                r=@Circle.r.AsString()
                stroke="@Circle.Stroke"
                stroke-width="@Circle.StrokeWidth"
                fill="@Circle.Fill"
                @onmousedown="Select" />
    </g>
    @if (Circle.Selected)
    {
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(0)" Position="(Circle.cx + Circle.r, Circle.cy)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(1)" Position="(Circle.cx - Circle.r, Circle.cy)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(2)" Position="(Circle.cx, Circle.cy + Circle.r)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(3)" Position="(Circle.cx, Circle.cy - Circle.r)" />
    }
</ContextMenuTrigger>

@code {
    [Parameter]
    public Circle Circle { get; set; }

    public void AnchorSelect(int anchor)
    {
        Circle.CurrentAnchor = anchor;
        Circle.EditMode = EditMode.MoveAnchor;
    }

    public void Select(MouseEventArgs eventArgs)
    {
        if (Circle.SVG.CurrentShape == null || Circle.SVG.CurrentShape.EditMode == EditMode.None)
        {
            Circle.SVG.CurrentShape = Circle;
            Circle.Panner = Circle.SVG.LocalDetransform((eventArgs.OffsetX, eventArgs.OffsetY));
            Circle.EditMode = EditMode.Move;
        }
    }

    protected override bool ShouldRender()
    {
        var StateRepresentation = Circle.StateRepresentation;
        if (Circle._StateRepresentation != StateRepresentation)
        {
            Circle._StateRepresentation = StateRepresentation;
            return true;
        }
        return false;
    }
}