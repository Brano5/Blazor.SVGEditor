<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@Path>
    <g transform="translate(@Path.SVG.Translate.x.AsString() @Path.SVG.Translate.y.AsString()) scale(@Path.SVG.Scale.AsString())">
        <path d="@Path.Instructions.AsString()" fill="@Path.Fill" stroke="@Path.Stroke" stroke-width="@Path.StrokeWidth" @onmousedown="Select" />
    </g>
    @if (Path.Selected)
    {
        if (Path.EditMode != EditMode.Add)
        {
            @for (int i = 0; i < Path.Instructions.Count; i++)
            {
                var j = i;
                if (Path.Instructions[i] is not ClosePathInstruction)
                {
                    <PrimaryAnchor OnMouseDown="() => AnchorSelect(j, -1)" Position=Path.Instructions[i].EndPosition />
                }
                if (Path.Instructions[i] is CubicBézierCurveInstruction cubicCurve)
                {
                    <PrimaryLine From=cubicCurve.StartPosition To=cubicCurve.ControlPoints[0] />
                    <PrimaryLine From=cubicCurve.ControlPoints[1] To=cubicCurve.EndPosition />
                }
                else if (Path.Instructions[i] is QuadraticBézierCurveInstruction quadraticCurve)
                {
                    <PrimaryLine From=quadraticCurve.StartPosition To=quadraticCurve.ControlPoints[0] />
                    <PrimaryLine From=quadraticCurve.ControlPoints[0] To=quadraticCurve.EndPosition />
                }
                else if (Path.Instructions[i] is EllipticalArcInstruction ellipticalArc)
                {
                    <PrimaryAnchor OnMouseDown="() => AnchorSelect(j, 0)" Position=ellipticalArc.ControlPointYPos />
                    <PrimaryAnchor OnMouseDown="() => AnchorSelect(j, 1)" Position=ellipticalArc.ControlPointYNeg />
                    <PrimaryAnchor OnMouseDown="() => AnchorSelect(j, 2)" Position=ellipticalArc.ControlPointXPos />
                    <PrimaryAnchor OnMouseDown="() => AnchorSelect(j, 3)" Position=ellipticalArc.ControlPointXNeg />
                    <ellipse transform="translate(@Path.SVG.Translate.x.AsString() @Path.SVG.Translate.y.AsString()) rotate(@(ellipticalArc.xAxisRotation.AsString()) @((ellipticalArc.Center.x*Path.SVG.Scale).AsString()) @((ellipticalArc.Center.y*Path.SVG.Scale).AsString()))" cx="@((ellipticalArc.Center.x*Path.SVG.Scale).AsString())" cy="@((ellipticalArc.Center.y*Path.SVG.Scale).AsString())" rx="@((ellipticalArc.EllipseRadi.Rx*Path.SVG.Scale).AsString())" ry="@((ellipticalArc.EllipseRadi.Ry*Path.SVG.Scale).AsString())" style="pointer-events: none;" fill="none" stroke-dasharray="4" stroke="grey" stroke-width="2"></ellipse>
                }
                if (Path.Instructions[i] is BaseControlPointPathInstruction ControlPointInstruction)
                {
                    for (int k = 0; k < ControlPointInstruction.ControlPoints.Count; k++)
                    {
                        var anchor = k;
                        <PrimaryAnchor OnMouseDown="() => AnchorSelect(j, anchor)" Position=ControlPointInstruction.ControlPoints[k] />
                    }
                    if (Path.Instructions[i] is ShorthandCubicBézierCurveInstruction shorthandCubicCurve)
                    {
                        <SecondaryLine From=shorthandCubicCurve.StartPosition To=shorthandCubicCurve.ReflectedPreviousInstructionsLastControlPoint />
                        <PrimaryLine From=shorthandCubicCurve.ControlPoints[0] To=shorthandCubicCurve.EndPosition />
                        <SecondaryAnchor OnMouseDown="() => AnchorSelect(j, -2)" Position=ControlPointInstruction.ReflectedPreviousInstructionsLastControlPoint />
                    }
                    if (Path.Instructions[i] is ShorthandQuadraticBézierCurveInstruction shorthandQuadraticCurve)
                    {
                        <SecondaryLine From=shorthandQuadraticCurve.StartPosition To=shorthandQuadraticCurve.ReflectedPreviousInstructionsLastControlPoint />
                        <SecondaryLine From=shorthandQuadraticCurve.EndPosition To=shorthandQuadraticCurve.ReflectedPreviousInstructionsLastControlPoint />
                        <SecondaryAnchor OnMouseDown="() => AnchorSelect(j, -2)" Position=ControlPointInstruction.ReflectedPreviousInstructionsLastControlPoint />
                    }
                }
            }
        }
    }
</ContextMenuTrigger>

@code {
    [Parameter]
    public Path Path { get; set; }

    public void AnchorSelect(int segment, int anchor)
    {
        if (Path.EditMode != EditMode.Add)
        {
            Path.CurrentInstruction = segment;
            Path.CurrentAnchor = anchor;
            Path.EditMode = EditMode.MoveAnchor;
        }
    }

    public void Select(MouseEventArgs eventArgs)
    {
        if (Path.SVG.CurrentShape == null || Path.SVG.CurrentShape.EditMode == EditMode.None)
        {
            Path.SVG.CurrentShape = Path;
            Path.Panner = Path.SVG.LocalDetransform((eventArgs.OffsetX, eventArgs.OffsetY));
            Path.EditMode = EditMode.Move;
        }
    }

    protected override bool ShouldRender()
    {
        var StateRepresentation = Path.StateRepresentation;
        if (Path._StateRepresentation != StateRepresentation)
        {
            Path._StateRepresentation = StateRepresentation;
            return true;
        }
        return false;
    }
}
