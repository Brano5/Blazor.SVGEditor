@inject IJSRuntime JSRuntime

<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement>
    <g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <rect
            tabindex="0"
            @onfocusin="() => SVGElement.SVG.CurrentShape = SVGElement"
            @onfocusout="() => SVGElement.SVG.CurrentShape = null"
            @ref=ElementReference
            x=@SVGElement.x.AsString()
            y=@SVGElement.y.AsString()
            width=@SVGElement.width.AsString()
            height=@SVGElement.height.AsString()
            stroke="@SVGElement.Stroke"
            stroke-width="@SVGElement.StrokeWidth"
            fill="@SVGElement.Fill"
            @onmousedown="Select"
            @onkeyup="KeyUp" />
    </g>
    @if (SVGElement.Selected && SVGElement.EditMode != EditMode.Add)
    {
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(0)" Position="(SVGElement.x, SVGElement.y)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(1)" Position="(SVGElement.x + SVGElement.width, SVGElement.y)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(2)" Position="(SVGElement.x + SVGElement.width, SVGElement.y + SVGElement.height)" />
        <PrimaryAnchor OnMouseDown="() => AnchorSelect(3)" Position="(SVGElement.x, SVGElement.y + SVGElement.height)" />
    }
</ContextMenuTrigger>

@code {
    [Parameter]
    public Rect SVGElement { get; set; }

    public ElementReference ElementReference { get; set; }

    public void KeyUp(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Delete")
        {
            SVGElement.SVG.Remove(SVGElement);
        }
    }

    public void AnchorSelect(int anchor)
    {
        SVGElement.CurrentAnchor = anchor;
        SVGElement.EditMode = EditMode.MoveAnchor;
    }

    public async Task Select(MouseEventArgs eventArgs)
    {
        if (SVGElement.SVG.CurrentShape == null || SVGElement.SVG.CurrentShape.EditMode is EditMode.None or EditMode.Scale)
        {
            if (SVGElement.SVG.CurrentShape is not null && SVGElement.SVG.CurrentShape != SVGElement)
            {
                SVGElement.SVG.CurrentShape.EditMode = EditMode.None;
            }
            await JSRuntime.Focus(ElementReference);
            SVGElement.SVG.CurrentShape = SVGElement;
            SVGElement.Panner = SVGElement.SVG.LocalDetransform((eventArgs.OffsetX, eventArgs.OffsetY));
            SVGElement.EditMode = EditMode.Move;
        }
    }

    protected override bool ShouldRender()
    {
        var StateRepresentation = SVGElement.StateRepresentation;
        if (SVGElement._StateRepresentation != StateRepresentation)
        {
            SVGElement._StateRepresentation = StateRepresentation;
            return true;
        }
        return false;
    }
}