<circle cx=@X cy=@Y r="@((5+CircleThickness).AsString())" stroke-width="@CircleThickness.AsString()" stroke="white" fill="@MiddleColor" @onpointerdown=OnPointerDown />
<circle cx=@X cy=@Y r="5" stroke-width="@CircleThickness.AsString()" stroke="@RingColor" fill="transparent" style="pointer-events:none;" />

@code {
    [Parameter]
    public EventCallback<PointerEventArgs> OnPointerDown { get; set; }

    [Parameter, EditorRequired]
    public (double x, double y) Position { get; set; }

    [Parameter, EditorRequired]
    public string RingColor { get; set; } = default!;

    [Parameter]
    public string MiddleColor { get; set; } = "transparent";

    [Parameter]
    public double CircleThickness { get; set; } = 2;

    [CascadingParameter]
    protected SVG SVG { get; set; } = default!;

    protected string X => SVG.LocalTransform(Position).x.AsString();

    protected string Y => SVG.LocalTransform(Position).y.AsString();

    private string _State { get; set; } = string.Empty;

    private string State => $"{Position.x}{Position.y}{SVG.Scale}{SVG.Translate.x}{SVG.Translate.y}{RingColor}{MiddleColor}";

    protected override bool ShouldRender()
    {
        if (_State != State)
        {
            _State = State;
            return true;
        }
        return false;
    }
}
