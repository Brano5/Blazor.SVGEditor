<circle cx=@X cy=@Y r="7" class="@OuterClasses" fill="@MiddleColor" @onpointerdown=OnPointerDown />
<circle cx=@X cy=@Y r="5" class="@InnerClasses" />

@code {
    [Parameter]
    public EventCallback<PointerEventArgs> OnPointerDown { get; set; }

    [Parameter, EditorRequired]
    public (double x, double y) Position { get; set; }

    [Parameter]
    public string MiddleColor { get; set; } = "transparent";

    [Parameter]
    public bool ThickCircle { get; set; } = false;

    [Parameter]
    public MarkerType MarkerType { get; set; } = MarkerType.Primary;

    [CascadingParameter]
    public required SVGEditor SVGEditor { get; set; }

    protected string X => SVGEditor.LocalTransform(Position).x.AsString();

    protected string Y => SVGEditor.LocalTransform(Position).y.AsString();

    protected string OuterClasses => "anchor-outer"
    + (ThickCircle ? " anchor-outer-thick" : " anchor-outer-thin");

    protected string InnerClasses => "anchor-inner"
    + MarkerType switch
    {
        MarkerType.Primary => " anchor-primary",
        MarkerType.Secondary => " anchor-secondary",
        MarkerType.Opportunity => " anchor-opportunity",
        var value => " anchor-custom-" + (int)value
    }
    + (ThickCircle ? " anchor-inner-thick" : " anchor-inner-thin");

    private string _State { get; set; } = string.Empty;

    private string State => $"{Position.x}{Position.y}{SVGEditor.Scale}{SVGEditor.Translate.x}{SVGEditor.Translate.y}{MarkerType}{ThickCircle}{MiddleColor}";

    protected override bool ShouldRender()
    {
        if (_State != State)
        {
            _State = State;
            return true;
        }
        return false;
    }
}
