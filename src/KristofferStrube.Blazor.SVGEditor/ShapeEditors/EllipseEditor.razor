@inherits ShapeEditor<Ellipse>

<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement StopPropagation=@(!SVGElement.IsChildElement)>
    <g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <ellipse tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
                 @onfocusin="FocusElement"
                 @onfocusout="UnfocusElement"
                 @ref=ElementReference
                 cx=@SVGElement.Cx.AsString()
                 cy=@SVGElement.Cy.AsString()
                 rx=@SVGElement.Rx.AsString()
                 ry=@SVGElement.Ry.AsString()
                 stroke="@SVGElement.Stroke"
                 stroke-width="@SVGElement.StrokeWidth"
                 fill="@SVGElement.Fill"
                 @onpointerdown="Select"
                 @onkeyup="KeyUp">
            @foreach(BaseAnimate animate in SVGElement.AnimationElements)
            {
                var Parameters = new Dictionary<string, object> { { "SVGElement", animate } };
                <DynamicComponent Type=animate.Presenter Parameters=Parameters />
            }
        </ellipse>
    </g>
    @if (SVGElement.Selected && SVGElement.SVG.EditMode != EditMode.Add)
    {
        <Anchor Color="black" OnPointerDown="() => AnchorSelect(0)" Position="(SVGElement.Cx + SVGElement.Rx, SVGElement.Cy)" />
        <Anchor Color="black" OnPointerDown="() => AnchorSelect(1)" Position="(SVGElement.Cx - SVGElement.Rx, SVGElement.Cy)" />
        <Anchor Color="black" OnPointerDown="() => AnchorSelect(2)" Position="(SVGElement.Cx, SVGElement.Cy + SVGElement.Ry)" />
        <Anchor Color="black" OnPointerDown="() => AnchorSelect(3)" Position="(SVGElement.Cx, SVGElement.Cy - SVGElement.Ry)" />
    }
</ContextMenuTrigger>