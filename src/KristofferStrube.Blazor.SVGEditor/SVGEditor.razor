<CascadingValue Value=this IsFixed=true>
    <ContextMenuTrigger MenuId="SVGMenu" style="height:100%;">
        <svg @ref=SVGElementReference
        @onpointermove="Move"
        @onpointerdown="Down"
        @onpointerup="Up"
        @onpointerout="Out"
        @onwheel="Wheel"
        @onpointerdown:stopPropagation="true"
        @oncontextmenu="()=>{}"
        @oncontextmenu:preventDefault="@DisableContextMenu"
             style="border:1px solid black; cursor:@(TranslatePanner.HasValue ? "move" : "initial");user-select:none;touch-action:none;"
             width="100%"
             height="100%">
            <rect width="100%" height="100%" fill="transparent" @onpointerdown=@UnSelect></rect>
            @foreach (ISVGElement SVGElement in Elements)
            {
                var Parameters = new Dictionary<string, object> { { "SVGElement", SVGElement } };
                <DynamicComponent Type=@SVGElement.Presenter Parameters=Parameters />
            }
            @if (!DisableScaleLabel)
            {
                <foreignObject class="unselectable" x="5" y="0" height="22" width="150" style="font-size:20px;pointer-events:none;touch-action:none;">Scale 1:@(Math.Round(Scale, 3).AsString())</foreignObject>
            }
            @foreach (var shape in MarkedShapes)
            {
                @if (shape.Fill is ['u', 'r', 'l', '(', '\'', '#', .. var id, '\'', ')']
               && Definitions.TryGetValue(id, out var definition)
               && definition is LinearGradient linearGradient)
                {
                    <LinearGradientEditor LinearGradient="linearGradient" EditingShape="shape" />
                }
            }
            @if (SelectionBox is not null)
            {
                <BoxScaler Box=SelectionBox />
            }
        </svg>
    </ContextMenuTrigger>
    @if (!DisableContextMenu)
    {
        <ContextMenu Id="SVGMenu">
            @if (SelectedShapes.Count == 1 && EditMode == EditMode.Add)
            {
                <Item OnClick="_ => CompleteShape(SelectedShapes[0])">
                    <div class="icon">✨</div> Complete New Shape

                    @if (CompleteNewShapeMenuItems.Any(item => item.ShouldBePresented(this)))
                    {
                        <SubMenu>
                            @foreach (var item in CompleteNewShapeMenuItems)
                            {
                                <DynamicComponent Type=item.ComponentType />
                            }
                        </SubMenu>
                    }
                </Item>
            }
            else if (AddNewSVGElementMenuItems.Any(item => item.ShouldBePresented(this, context.Data)))
            {
                <Item>
                    <div class="icon">✨</div> Add
                    <SubMenu>
                        @foreach (var item in AddNewSVGElementMenuItems)
                        {
                            <DynamicComponent Type=item.ComponentType Parameters=@(new Dictionary<string, object>() { { "Data", context.Data } }) />
                        }
                    </SubMenu>
                </Item>
            }
            @if (context.Data is Shape shape && !shape.IsChildElement)
            {
                if (!DisableContextMenuFillItem)
                {
                    <Item OnClick=@(() => OpenColorPicker("Fill", shape.Fill, _ => {}))>
                        <ColorCube Color=@shape.Fill /> Fill
                        <SubMenu>
                            <Item OnClick=@(_ => SetFillForMarkedShapes("none"))><div class="icon">⚪</div> Set To None</Item>
                            <Item OnClick=@(_ => SetFillForMarkedShapes("transparent"))><div class="icon">🔘</div> Set To Transparent</Item>
                            <Item OnClick=@(_ => SetFillForMarkedShapes("black"))><div class="icon">⚫</div> Set To Black</Item>
                            @if (Definitions.Values.Count(d => d is LinearGradient) > 0)
                            {
                                <Item>
                                    <div class="icon">🦓</div> Gradients
                                    <SubMenu>
                                        @foreach (var (key, value) in Definitions)
                                        {
                                            <Item OnClick=@(_ => SetFillForMarkedShapes(key.ToUrl()))>
                                                <ColorCube Color=@($"url('#{key}')") />
                                                @key
                                            </Item>
                                        }
                                    </SubMenu>
                                </Item>
                            }
                        </SubMenu>
                    </Item>
                }
                if (!DisableContextMenuStrokeItem)
                {
                    <Item OnClick=@(() => OpenColorPicker("Stroke", shape.Stroke, _ => {}))>
                        <ColorCube Color=@shape.Stroke /> Stroke
                        <SubMenu>
                            <Item @onclick:stopPropagation="true">
                                <div class="icon">➖</div> Width
                                <input type="number" @bind-value=shape.StrokeWidth @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
                            </Item>
                            <Item @onclick:stopPropagation="true">
                                <div class="icon">🍭</div> Line Cap
                                <InputSelect @bind-Value=shape.StrokeLinecap style="width:70px;height:28px;float:right;">
                                    <option value="@Linecap.Butt">butt</option>
                                    <option value="@Linecap.Round">round</option>
                                    <option value="@Linecap.Square">square</option>
                                </InputSelect>
                            </Item>
                            <Item @onclick:stopPropagation="true">
                                <div class="icon">🧩</div> Line Join
                                <InputSelect @bind-Value=shape.StrokeLinejoin style="width:70px;height:28px;float:right;">
                                    <option value="@Linejoin.Miter">miter</option>
                                    <option value="@Linejoin.MiterClip">miter-clip</option>
                                    <option value="@Linejoin.Round">round</option>
                                    <option value="@Linejoin.Bevel">bevel</option>
                                    <option value="@Linejoin.Arcs">arcs</option>
                                </InputSelect>
                            </Item>
                            <Item @onclick:stopPropagation="true">
                                <div class="icon">🍡</div> Dash Array
                                <input @bind-value=shape.StrokeDasharray @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
                            </Item>
                            <Item @onclick:stopPropagation="true">
                                <div class="icon">🔪</div> Dash Offset
                                <input type="number" @bind-value=shape.StrokeDashoffset @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
                            </Item>
                            <Item OnClick=@(_ => SetStrokeForMarkedShapes("none"))><div class="icon">⚪</div> Set To None</Item>
                            <Item OnClick=@(_ => SetStrokeForMarkedShapes("transparent"))><div class="icon">🔘</div> Set To Transparent</Item>
                            <Item OnClick=@(_ => SetStrokeForMarkedShapes("black"))><div class="icon">⚫</div> Set To Black</Item>
                            @if (Definitions.Values.Count(d => d is LinearGradient) > 0)
                            {
                                <Item>
                                    <div class="icon">🦓</div> Gradients
                                    <SubMenu>
                                        @foreach (var (key, value) in Definitions)
                                        {
                                            <Item OnClick=@(_ => SetStrokeForMarkedShapes(key.ToUrl()))>
                                                <ColorCube Color=@($"url('#{key}')") />
                                                @key
                                            </Item>
                                        }
                                    </SubMenu>
                                </Item>
                            }
                        </SubMenu>
                    </Item>
                }
                if (!DisableContextMenuFontItem && shape is Text text)
                {
                    <Item>
                        <div class="icon">🆎</div> Font
                        <SubMenu>
                            <Item @onclick:preventDefault="true">
                                <div class="icon">🔠</div> Font Size
                                <input type="number" @bind-value=text.FontSize @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
                            </Item>
                            <Item @onclick:preventDefault="true">
                                <div class="icon">🅱</div> Font Weight
                                <input type="text" @bind-value=text.FontWeight @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
                            </Item>
                            <Item @onclick:preventDefault="true">
                                <div class="icon">🔣</div> Font Family
                                <input type="text" @bind-value=text.FontFamily @bind-value:event="oninput" style="width:50px;height:26px;float:right;" />
                            </Item>
                        </SubMenu>
                    </Item>
                }
                if (!DisableContextMenuAnimationsItem && shape.HasAnimation)
                {
                    <Item>
                        <div class="icon">💥</div> Animations
                        <SubMenu>
                            @if (shape.AnimationElements.Any(a => a.Playing))
                            {
                                <Item OnClick="StopAnimation"><div class="icon">🛑</div> Stop Animations</Item>
                            }
                            else
                            {
                                <Item OnClick="PlayAnimation"><div class="icon">▶</div> Play Animations</Item>
                            }
                            @foreach (BaseAnimate animate in shape.AnimationElements)
                            {
                                <DynamicComponent Type=animate.MenuItem Parameters=@(new Dictionary<string, object> { { "Animate", animate } }) />
                            }
                        </SubMenu>
                    </Item>
                }
                if (!DisableContextMenuMoveItem)
                {
                    <Item>
                        <div class="icon">↕</div> Move
                        <SubMenu>
                            <Item OnClick="() => MoveToBack(shape)"><div class="icon">⏫</div> To Back</Item>
                            <Item OnClick="() => MoveBack(shape)"><div class="icon">🔼</div> Back</Item>
                            <Item OnClick="() => MoveForward(shape)"><div class="icon">🔽</div> Forward</Item>
                            <Item OnClick="() => MoveToFront(shape)"><div class="icon">⏬</div> To Front</Item>
                        </SubMenu>
                    </Item>
                }
                if (!DisableContextMenuScaleItem && shape is Path path)
                {
                    <Item data=path OnClick="() => ScaleShape(shape)"> <div class="icon">↔</div> Scale</Item>
                }
                if (!DisableContextMenuGroupItem)
                {
                    <Item OnClick="() => Group(shape)"><div class="icon">🔗</div> Group</Item>
                }
                if (!DisableContextMenuUngroupItem && shape is G g)
                {
                    <Item OnClick="() => Ungroup(g)"><div class="icon">📤</div> Ungroup</Item>
                }
                if (!DisableRemoveElement)
                {
                    <Item OnClick="() => Remove()"><div class="icon">❌</div> Remove</Item>
                }
                if (!DisableCopyElement)
                {
                    <Item OnClick="() => CopyElementsAsync()"><div class="icon">✂️</div> Copy</Item>
                }
                if (!DisablePasteElement)
                {
                    <Item OnClick="() => PasteElementsAsync(shape)"><div class="icon">📋</div> Paste</Item>
                }
                if (!DisableContextMenuOptimizeItem)
                {
                    <Item>
                        <div class="icon">📈</div> Optimize
                        <SubMenu>
                            <Item OnClick="() => SnapShapesToInteger()"><div class="icon">🔢</div> Snap To Integer</Item>
                            <Item OnClick="() => CompactPaths()"><div class="icon">🤏</div> Compact paths to relative</Item>
                        </SubMenu>
                    </Item>
                }
            }
            else if (context.Data is Stop stop)
            {
                <Item OnClick=@(() => OpenColorPicker("Gradient Stop", stop.StopColor, (value) => stop.StopColor = value))>
                    <ColorCube Color=@stop.StopColor /> Gradient Stop Color
                </Item>
            }
            else if (!DisablePasteElement)
            {
                <Item OnClick="() => PasteElementsAsync()"><div class="icon">📋</div> Paste</Item>
            }
        </ContextMenu>
    }
</CascadingValue>
<ColorPicker Title=@ColorPickerTitle IsOpened=@IsColorPickerOpen Closed=@ColorPickerClosed MyColor=@PreviousColor></ColorPicker>