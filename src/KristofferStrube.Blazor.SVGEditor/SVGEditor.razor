<CascadingValue Value=this IsFixed=true>
    <ContextMenuTrigger MenuId="SVGMenu" style="height:100%;" MouseButtonTrigger="ShouldShowContextMenu(null) ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
        <svg @ref=svgElementReference
             @onpointermove="Move"
             @onpointerdown="Down"
             @ontouchstart="TouchStart"
             @ontouchmove="TouchMove"
             @ontouchend="TouchEnd"
             @ontouchleave="TouchEnd"
             @onpointerup="Up"
             @onpointerout="Out"
             @onwheel="Wheel"
             @onpointerdown:stopPropagation="true"
             @oncontextmenu="()=>{}"
             @oncontextmenu:preventDefault="true"
             class="svg-editor"
             style="cursor:@(translatePanner.HasValue ? "move" : "initial");"
             width="100%"
             height="100%">
            <rect width="100%" height="100%" fill="transparent" @onmousedown=@UnSelect @ontouchstart=@TouchUnSelect></rect>
            @foreach (ISVGElement SVGElement in Elements)
            {
                var Parameters = new Dictionary<string, object> { { "SVGElement", SVGElement } };
                <DynamicComponent Type=@SVGElement.Presenter Parameters=Parameters />
            }
            @if (HideElements)
            {
                <rect width="100%" height="100%" fill="white" class="svg-editor"></rect>
            }
            @if (!DisableScaleLabel)
            {
                <foreignObject class="unselectable" x="5" y="0" height="22" width="150" style="font-size:20px;pointer-events:none;touch-action:none;">Scale 1:@(Math.Round(Scale, 3).AsString())</foreignObject>
            }
            @foreach (var shape in MarkedShapes)
            {
                @if (shape.Fill is ['u', 'r', 'l', '(', '\'', '#', .. var id, '\'', ')']
               && Definitions.TryGetValue(id, out var definition)
               && definition is LinearGradient linearGradient)
                {
                    <LinearGradientEditor LinearGradient="linearGradient" EditingShape="shape" />
                }
            }
            @if (SelectionBox is not null)
            {
                <BoxScaler Box=SelectionBox />
            }
        </svg>
    </ContextMenuTrigger>
    <ContextMenu Id="SVGMenu" @oncontextmenu:preventDefault="true">
        @if (SelectedShapes.Count == 1 && EditMode == EditMode.Add)
        {
            <Item OnClick="_ => CompleteShape(SelectedShapes[0])">
                <div class="icon">✨</div> Complete New Shape

                @if (CompleteNewShapeMenuItems.Any(item => item.ShouldBePresented(this)))
                {
                    <SubMenu>
                        @foreach (var item in CompleteNewShapeMenuItems)
                        {
                            if (item.ShouldBePresented(this))
                            {
                                <DynamicComponent Type=item.ComponentType />
                            }
                        }
                    </SubMenu>
                }
            </Item>
        }
        else if (AddNewSVGElementMenuItems.Any(item => item.ShouldBePresented(this, context.Data)))
        {
            <Item>
                <div class="icon">✨</div> Add
                <SubMenu>
                    @foreach (var item in AddNewSVGElementMenuItems)
                    {
                        if (item.ShouldBePresented(this, context.Data))
                        {
                            <DynamicComponent Type=item.ComponentType Parameters=@(new Dictionary<string, object>() { { "Data", context.Data } }) />
                        }
                    }
                </SubMenu>
            </Item>
        }
        @if (context.Data is Stop stop)
        {
            <Item OnClick=@(() => OpenColorPicker("Gradient Stop", stop.StopColor, (value) => stop.StopColor = value))>
                <ColorCube Color=@stop.StopColor /> Gradient Stop Color
            </Item>
        }
        @if (ActionMenuItems.Any(item => item.ShouldBePresented(this, context.Data)))
        {
            @foreach (var item in ActionMenuItems)
            {
                if (item.ShouldBePresented(this, context.Data))
                {
                    <DynamicComponent Type=item.ComponentType Parameters=@(new Dictionary<string, object>() { { "Data", context.Data } }) />
                }
            }
        }
    </ContextMenu>
</CascadingValue>
<ColorPicker Title=@ColorPickerTitle IsOpened=@IsColorPickerOpen Closed=@ColorPickerClosed MyColor=@PreviousColor></ColorPicker>