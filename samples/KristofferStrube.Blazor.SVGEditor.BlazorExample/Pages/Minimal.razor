@page "/Minimal"
@using KristofferStrube.Blazor.SVGEditor.MenuItems.Action;

<PageTitle>Minimal configured SVGEditor</PageTitle>

<p>
    Here we have disabled all interaction with the SVG Editor except for selecting shapes, deselecting shapes, moving shapes, and moving anchor points.
</p>
@if (SVGEditor is not null)
{
    <div style="display:flex; flex-wrap: wrap; grid-column-gap: 30px;">
        <div>
            <InputCheckbox @bind-Value=SVGEditor.DisableContextMenu id="DisableContextMenu" />
            <label for="DisableContextMenu">Disable ContextMenu</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=SVGEditor.DisableZoom id="DisableZoom" />
            <label for="DisableZoom">Disable Zoom</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=SVGEditor.DisablePanning id="DisablePanning" />
            <label for="DisablePanning">Disable Panning</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=DisableSelecting id="DisableSelecting" />
            <label for="DisableSelecting">Disable Selecting</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=DisableDeselecting id="DisableDeselecting" />
            <label for="DisableDeselecting">Disable Deselecting</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=SVGEditor.DisableBoxSelection id="DisableBoxSelection" />
            <label for="DisableBoxSelection">Disable Box Selection</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=DisableMoveEditMode id="DisableMoveEditMode" />
            <label for="DisableMoveEditMode">Disable Move EditMode</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=DisableMoveAnchorEditMode id="DisableMoveAnchorEditMode" />
            <label for="DisableMoveAnchorEditMode">Disable MoveAnchor EditMode</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=SVGEditor.DisableRemoveElement id="DisableRemoveElement" />
            <label for="DisableRemoveElement">Disable Remove Element</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=SVGEditor.DisableCopyElement id="DisableCopyElement" />
            <label for="DisableCopyElement">Disable Copy Element</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=SVGEditor.DisablePasteElement id="DisablePasteElement" />
            <label for="DisablePasteElement">Disable Paste Element</label>
        </div>
        <div>
            <InputCheckbox @bind-Value=SVGEditor.DisableScaleLabel id="DisableScaleLabel" />
            <label for="DisableScaleLabel">Disable Scale Label</label>
        </div>
    </div>
}
<div style="height:70vh">
    <SVGEditor @ref="SVGEditor"
               Input=@Input
               InputUpdated="(string s) => { Input = s; StateHasChanged(); }"
               SnapToInteger=true
               AddNewSVGElementMenuItems=new()
               ActionMenuItems=@(new() {
                   new(typeof(RemoveMenuItem), (svgEditor, data) => !svgEditor.DisableRemoveElement),
                   new(typeof(CopyMenuItem), (svgEditor, data) => !svgEditor.DisableCopyElement),
                   new(typeof(PasteMenuItem), (svgEditor, data) => !svgEditor.DisablePasteElement),
               })
               DisableSelecting=DisableSelecting
               DisableDeselecting=DisableDeselecting
               DisableMoveEditMode=DisableMoveEditMode
               DisableMoveAnchorEditMode=DisableMoveAnchorEditMode />
</div>

@code {
    private SVGEditor SVGEditor;
    private string Input =
    """<polygon stroke="#FB8C00" stroke-width="10" fill="#3949AB" points="100,100 300,100 300,300 100,300" stroke-linecap="round" stroke-linejoin="round" stroke-dashoffset="15" stroke-dasharray="30 20"></polygon><polygon stroke="black" stroke-width="3" fill="grey" points="100,400 300,400 300,600 100,600"></polygon>""";
    private bool DisableSelecting;
    private bool DisableDeselecting;
    private bool DisableMoveEditMode;
    private bool DisableMoveAnchorEditMode;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;


        SVGEditor.DisableAllInteractions();

        DisableSelecting = false;
        DisableDeselecting = false;
        DisableMoveEditMode = false;
        DisableMoveAnchorEditMode = false;
        SVGEditor.SelectedShapes.Add(SVGEditor.Elements.First() as Shape);
        StateHasChanged();
    }
} 